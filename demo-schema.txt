import everything from 'http://ns.nuke24.net/Schema/'
import everything from 'http://ns.nuke24.net/Schema/DataTypeTranslation/'
import everything from 'http://ns.nuke24.net/Schema/Application/'

import 'http://ns.nuke24.net/Schema/Types/Number'
import 'http://ns.nuke24.net/Schema/Types/Integer'
import 'http://ns.nuke24.net/Schema/Types/Boolean'
import 'http://ns.nuke24.net/Schema/Types/String' as 'text'

import 'http://ns.nuke24.net/Schema/Functions/Unindent'

import 'http://schema.org/True' as 'true'
import 'http://schema.org/False' as 'false'
import 'http://www.w3.org/2000/01/rdf-schema#isSubclassOf' as 'extends'
import 'http://ns.nuke24.net/Schema/RDB/Sequence'
import 'http://ns.nuke24.net/Schema/RDB/Schema'
import 'http://ns.nuke24.net/Schema/RDB/initialValue'
import 'http://ns.nuke24.net/Schema/RDB/nameInDatabase'
import 'http://ns.nuke24.net/Schema/RDB/isInNamespace'
import 'http://ns.nuke24.net/Schema/RDB/defaultValueSequence'

sequence 'entity ID sequence' : initial value @ 1001

extend 'integer' :
	SQL type @ "INT" :
	PHP type @ "int" :
	JSON type @ "number"
extend 'boolean' :
	SQL type @ "BOOLEAN" :
	PHP type @ "bool" :
	JSON type @ "boolean"
extend 'text' :
	SQL type @ "text" :
	PHP type @ "string" :
	JSON type @ "string"

class 'short string' : extends(text) :
	SQL type @ "VARCHAR(127)"

class 'entity ID' : extends(integer) :
	SQL type @ "BIGINT"
class 'percentage' : extends(integer) :
    SQL type @ "SMALLINT"

schema 'demo schema'

# Standard Rest Resource
class modifier 'SRR' =
	has a database table :
	has a REST service :
	members are public :
	is in namespace @ demo schema

field modifier 'EIPK' = entity ID : key(primary) : default value sequence @ entity ID sequence

enum mood {
	'ugh!'
	really bad
	meh
	sort of okay
	nice
	pretty sweet
	'rad!'
}

class 'resource' : SRR {
	ID : EIPK
	URN : short string
	type : enum(audio, video, image, document)
}

class 'person' : SRR {
	ID : EIPK
	name : short string
	# Demonstrate a field that does not have a corresponding
	# database column (default assumption for fields of
	# table-mapped classes is that they do have one):
	ziggurat : short string  : has a database column @ false :
		comment @ "A dummy column which exists solely for demonstrative porpoises."
}

class 'rating' : SRR : name in database @ "los_ratingos" : comment @ unindent @ «
	Oh hey look at this.
	A multi-line comment!
	
	We can even use «those quote characters» in here, as long as they are balanced.
	
	"Double quoted" strings are fine, and there's no escape sequences within «...»,
	so backslashes just mean themselves.  Look: \
	
	Oh, another line, wow!
» {
	author : reference(person) {
		ID = author ID : key(primary)
	}
	subject : reference(resource) {
		ID = subject ID : key(primary)
	}
	
	comment          : text       : nullable
	quality rating   : percentage : nullable
	resource is fake : boolean    : nullable
	feeling          : mood       : nullable
}
